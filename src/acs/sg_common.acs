#library "sg_common"
#include "zcommon.acs"

str music = ""; 
int room_num = 1;

int entered_room[2] = {
  0,  // room 1
  0 // room 2
};

int room_coordinates[2][2] = {
  { -32584.0, 32544.0 }, // room 1
  { -32584.0, 32544.0 } // room 2
};

int playerX = 0.0;
int playerY = 0.0;

int playerX_next_room = 0.0;
int playerY_next_room = 0.0;

str using_item = "";
str use_on = "";

str thing_tag = "";
str thing_str = "";
str item_taken = "";

int playerTid = 5000;
int hudWidth = 320;
int hudHeight = 240;

int messageCenter = 160.0;
int messageY = 192.0;

int messages_left = 0;
str messages[20] = {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""};

int msg_pen_layer = 2;
int msg_text_layer = 0;
int msg_back_layer = 0;

int full_torch = 60;
int dim_torch = 15;
int low_torch = 7;

script "on_enter" ENTER
{
  // check if map01
  Thing_ChangeTID(0, playerTid);

  SetActorAngle(playerTid, 0.25);
  SetActorPitch(playerTid, 0);
  SetActorPosition(playerTid, room_coordinates[0][0], room_coordinates[0][1], 0.0, 0);
  
  msg_text_layer = msg_pen_layer + 1;
  msg_back_layer = msg_text_layer + 1;
  
  // messages
  
  ACS_NamedExecute("correct_angle", 0);
}

script "correct_angle" (void)
{
  while(true)
  {
    int player_angle = GetActorAngle(0) >> 8;
    if (player_angle < 32 || player_angle > 192)
    {
      ChangeActorAngle(0, 32 << 8, 1);
    }
    else if (player_angle > 96 && player_angle < 192)
    {
      ChangeActorAngle(0, 96 << 8, 1);
    }
    
    int player_pitch = GetActorPitch(0);
    if (player_pitch > 6000)
    {
      ChangeActorPitch(0, 6000, 1);
    }
    else if (player_pitch < -6000)
    {
      ChangeActorPitch(0, -6000, 1);
    }
    Delay(1);
  }
}

script "show_message" (int keep_torch)
{
  if (messages_left == 0)
  {
    messages_left = 1;
  }

  SetActivator(playerTid);    
  SetPlayerProperty(1, 1, PROP_TOTALLYFROZEN);
  
  SetHudSize(hudWidth, hudHeight, FALSE);

  SetFont("msgback");
  HudMessage(s:"A"; HUDMSG_PLAIN, msg_back_layer, "CR_UNTRANSLATED", messageCenter, messageY, 0);

  SetFont("waitpen1");
  HudMessage(s:"A"; HUDMSG_PLAIN, msg_pen_layer, "CR_UNTRANSLATED", messageCenter + 99.0, messageY + 20.0, 0);

  while (messages_left > 0)
  {
    SetFont("SHADOWGATE");
    HudMessage(s:messages[messages_left - 1]; HUDMSG_PLAIN, msg_text_layer, "CR_BLACK", messageCenter, messageY, 0);

    while (true)
    {
      int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
      if (buttons & BT_ATTACK)
      {
        Delay(1);
      }
      else
      {
        break;
      }
    }

    while (true)
    {
      buttons = GetPlayerInput(-1, INPUT_BUTTONS);
      if (buttons & BT_ATTACK)
      {
        break;
      }
      else
      {
        Delay(1);
      }
    }
  
  
    messages_left--;
  }

  ACS_NamedExecute("clear_message", 0, keep_torch);
}

script "clear_message" (int keep_torch)
{
  if (keep_torch == 0)
  {
    TakeInventory("Torch1", 1);
    TakeInventory("Torch2", 1);
  }

  while (true)
  {
    int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
    if (buttons & BT_ATTACK)
    {
      Delay(1);
    }
    else
    {
      break;
    }
  }

  thing_tag = "";
  item_taken = "";

  SetPlayerProperty(1, 0, PROP_TOTALLYFROZEN);
  
  SetFont("");
  int layer = -100;
  while (layer <= 100)
  {
    HudMessage(s:""; HUDMSG_PLAIN, layer, "CR_BLACK", messageCenter, messageY, 0);
    layer++;
  }
  
  int msg = 0;
  while (msg < 20)
  {
    messages[msg] = "";
    msg++;
  }
  
  ACS_NamedExecuteAlways("select_music", 0);
  
  if (CheckInventory("Torch1") == 0 && CheckInventory("Torch2") == 0)
  {
    // no torch death
  }
}

script "common_msg" (int msg_type)
{
  messages_left = 1;
  switch(msg_type)
  {
    case 0: // you can't take it!
      messages[0] = StrParam(l:"MSG_COMMON_NO_TAKE");
      break;
    case 1: // it won't open!
      messages[0] = StrParam(l:"MSG_COMMON_NO_OPEN");
      break;
    case 2: // nothing happened.
      messages[0] = StrParam(l:"MSG_COMMON_NOTHING");
      break;
    case 3: // you can't use what you didn't take.
      messages[0] = StrParam(l:"MSG_COMMON_NO_USE");
      break;
    case 4: // ouch! that smarts!
      messages[0] = StrParam(l:"MSG_COMMON_OUCH");
      break;
    case 5: // you can't drop what you didn't take.
      messages[0] = StrParam(l:"MSG_COMMON_NO_LEAVE");
      break;
    case 6: // what you expected hasn't happened.
      messages[0] = StrParam(l:"MSG_COMMON_EXPECTED");
      break;
    case 7: // you seem to be wasting your time.
      messages[0] = StrParam(l:"MSG_COMMON_WAISTING");
      break;
  }

  ACS_NamedExecute("show_message", 0);
}

script "on_look" (void)
{
  messages_left = 1;
  messages[0] = StrParam(l:StrParam(s:"MSG_ROOM", i:room_num, s:"_", s:thing_tag, s:"_LOOK"));
  ACS_NamedExecute("show_message", 0);
}

script "on_take" (void)
{
  messages_left = 1;
  Thing_Remove(0);
  SetActivator(playerTid);

  GiveInventory(item_taken, 1);
  messages[0] = StrParam(s:thing_str, s:" IS IN HAND.");
  
  ACS_NamedExecute("show_message", 0);
}

script "on_open" (void)
{
  messages_left = 1;
  messages[0] = StrParam(s:thing_str, s:" IS OPENED.");
  ACS_NamedExecute("show_message", 0);
}

script "on_close" (void)
{
  messages_left = 1;
  messages[0] = StrParam(s:thing_str, s:" IS CLOSED.");
  ACS_NamedExecute("show_message", 0);  
}

script "select_music" (void)
{
  if ((CheckInventory("Torch1") <= low_torch && CheckInventory("Torch2") <= CheckInventory("Torch1")) ||
      (CheckInventory("Torch2") <= low_torch && CheckInventory("Torch1") <= CheckInventory("Torch2"))) {
      music = "trchlow";
  }
  else
  {
    switch (room_num)
      {
        case 1:
        case 2:
        case 3:
          music = "music1";
          break;
      }
  }
  
  LocalSetMusic(music);
}

script "door_sound" (void)
{
  LocalSetMusic("");
  PlaySound(playerTid, "DoorOpenClose", CHAN_BODY, 1.0, 0, ATTN_NONE);

  Delay(35 * 3);
  ACS_NamedExecuteAlways("select_music", 0);
}

script "move_to_room" (int next_room_num, int transition)
{
  str transition_prefix = "";

  switch (transition)
  {
    case 0:
      transition_prefix = "up";
      break;
    case 1:
      transition_prefix = "down";
      break;
    case 2:
      transition_prefix = "left";
      break;
    case 3:
      transition_prefix = "right";
      break;
    case 4:
      transition_prefix = "bck";
      break;
    case 5:
      transition_prefix = "fwd";
      break;
  }

  SetActivator(playerTid);    
  SetPlayerProperty(1, 1, PROP_TOTALLYFROZEN); 
   
  playerX_next_room = room_coordinates[next_room_num - 1][0];
  playerY_next_room = room_coordinates[next_room_num - 1][1];

  int frame = 1;
  while (frame <= 31)
  {
    str padding = "0";
    if (frame >= 10)
    {
      padding = "";
    }

    str pic = StrParam(s:transition_prefix, s:padding, d:frame);
        
    SetHudSize(112, 112, FALSE);

    SetFont("fwd15");
    HudMessage(s:"A"; HUDMSG_PLAIN, 2, "CR_BLACK", -56.0, 56.0, 0);
    HudMessage(s:"A"; HUDMSG_PLAIN, 3, "CR_BLACK", 168.0, 56.0, 0);

    SetFont(pic);
    HudMessage(s:"A"; HUDMSG_PLAIN, 1, "CR_BLACK", 56.0, 56.0, 0);
    Delay(1);
    
    if (frame == 16)
    {
      SetActorAngle(playerTid, 0.25);
      SetActorPitch(playerTid, 0);
      SetActorPosition(playerTid, playerX_next_room, playerY_next_room, 0.0, 0);
    }
    
    frame++;
  }

  HudMessage(s:""; HUDMSG_PLAIN, 1, "CR_BLACK", 56.0, 56.0, 0);
  HudMessage(s:""; HUDMSG_PLAIN, 2, "CR_BLACK", 56.0, 56.0, 0);
  HudMessage(s:""; HUDMSG_PLAIN, 3, "CR_BLACK", 56.0, 56.0, 0);
  room_num = next_room_num;
  
  ACS_NamedExecuteAlways("select_music", 0);
    
  playerX = playerX_next_room;
  playerY = playerY_next_room;
  
  // do animation first

  ACS_NamedExecute("show_message", 0);
  entered_room[room_num - 1] = 1;
}

script "room_messages" (void)
{
  switch (room_num)
  {
    case 2:
      messages_left = 3;
      messages[2] = StrParam(l:"MSG_ROOM2_ENTER1");
      messages[1] = StrParam(l:"MSG_ROOM2_ENTER2");
      messages[0] = StrParam(l:"MSG_ROOM2_ENTER3");
      break;
  }
}